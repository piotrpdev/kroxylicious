<?xml version="1.0"?>
<!--

    Copyright Kroxylicious Authors.

    Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0

-->
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">

    <!-- Source code is not formatted using tabs -->
    <module name="FileTabCharacter" />

    <module name="TreeWalker">
        <module name="SuppressWarningsHolder" />
        <!-- Checks for imports -->
        <module name="AvoidStarImport" />
        <module name="RedundantImport" />
        <module name="UnusedImports">
            <property name="processJavadoc" value="true"/>
        </module>

        <!-- Modifiers -->
        <module name="RedundantModifier"/>

        <!-- Checks for common coding problems -->
        <module name="EqualsHashCode" />
        <module name="IllegalInstantiation" />

        <!-- Checks that ModeShape would really like to use but this requires cleaning up more code -->
        <!--
        <module name="ModifierOrder" />
        <module name="HideUtilityClassConstructor" />
        <module name="EqualsAvoidNull" />
        <module name="MissingDeprecated" />
        <module name="MutableException" />
        <module name="GenericWhitespace" />
        -->

        <!-- Miscellaneous other checks. -->
        <module name="PackageAnnotation" />
        <module name="CovariantEquals" />
        <module name="OneStatementPerLine" />
        <module name="EmptyStatement" />
        <module name="DefaultComesLast" />
        <module name="TypecastParenPad" />
        <module name="CovariantEquals" />

        <module name="MissingOverride"/>

        <module name="NeedBraces"/>

        <!-- Checks for whitespace after tokens -->
        <module name="WhitespaceAfter"/>

        <module name="WhitespaceAround">
            <property name="tokens" value="LCURLY,QUESTION,COLON,SLIST" />
            <property name="allowEmptyLambdas" value="true" />
            <property name="allowEmptyConstructors" value="true" />
            <property name="allowEmptyTypes" value="true" />
        </module>

        <!-- Checks for blocks. You know, those {}'s -->
        <module name="LeftCurly">
            <property name="option" value="eol" />
        </module>

        <module name="RightCurly">
            <property name="option" value="alone"/>
        </module>

        <module name="ParenPad">
            <property name="tokens" value="CTOR_CALL, SUPER_CTOR_CALL" />
            <property name="option" value="nospace" />
        </module>

        <module name="RegexpSinglelineJava">
            <property name="format" value="System\.(out)|(err)\.print(ln)?\(" />
            <!-- The last sentence of the message is a keyword to trigger exclusion: see ExcludeTestPackages -->
            <property name="message" value="Not allowed to print to System.out: if you're damn sure you want it, disable Checkstyle on this line. [not required for tests]" />
            <property name="ignoreComments" value="true" />
        </module>

        <!-- Nobody should be using StringBuffer anymore -->
        <module name="RegexpSinglelineJava">
            <property name="format" value=" StringBuffer" />
            <!-- The last sentence of the message is a keyword to trigger exclusion: see ExcludeTestPackages -->
            <property name="message" value="Nobody should be using StringBuffer anymore" />
        </module>
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean"/>
        </module>

        <!-- not currently used by Kroxylicious but probably should do so -->
        <!-- i.e. ban netty imports in the API package, maybe there is a better tool than checkstlye for that -->
<!--        &lt;!&ndash;  Avoid importing some packages &ndash;&gt;-->
<!--        <module name="IllegalImport">-->
<!--            &lt;!&ndash; Should use TestNG &ndash;&gt;-->
<!--            <property name="illegalPkgs" value="org.testng"/>-->
<!--        </module>-->
<!--        <module name="IllegalImport">-->
<!--            &lt;!&ndash; Should use ModeShape-specific annotations &ndash;&gt;-->
<!--            <property name="illegalPkgs" value="net.jcip.annotations, org.apache.http.annotation"/>-->
<!--        </module>-->

        <!--
        Allow for suppressing sections of code using a starting and ending comment:
        // CHECKSTYLE\:OFF
        // CHECKSTYLE\:ON
        -->
        <module name="SuppressionCommentFilter" />

        <!-- Allow for suppressing sections of code using just a leading comment:
        // CHECKSTYLE IGNORE check FOR NEXT 2 LINES
        -->
        <module name="SuppressWithNearbyCommentFilter">
            <property name="commentFormat" value="CHECKSTYLE IGNORE (\w+) FOR NEXT (\d+) LINES"/>
            <property name="checkFormat" value="$1"/>
            <property name="influenceFormat" value="$2"/>
        </module>

        <!-- Checks that Debezium is expressly NOT using -->
        <!--module name="ModifiedControlVariable" /-->
        <!--module name="DeclarationOrder" /-->
        <!--module name="InnerTypeLast" /-->
        <!--module name="IllegalThrows"/-->
        <!--module name="IllegalCatch">
            <property name="illegalClassNames" value="java.lang.Throwable, java.lang.RuntimeException" />
        </module-->
        <!--module name="MethodParamPad">
            <property name="option" value="nospace" />
            <property name="allowLineBreaks" value="false" />
        </module-->

        <module name="io.kroxylicious.checks.AssumptionsCheck"/>

    </module>

    <!--
    BEGIN: ModeShape doesn't current require these, though it would be nice to do so
    -->

    <!--module name="RegexpMultiline">
        <property name="format" value="\S\s\s\z" />
        <property name="message" value="Only one new line is allowed at the end of a file" />
    </module-->
    <!-- We are not using NewLineAtEndOfFile because the new line chars change
        on different operating systems and that rule allows only one type. This rule
        is not actually checking for new lines, but it will work if we check that
        there are not white spaces at the end of a line with another rule. -->
    <!--module name="RegexpMultiline">
        <property name="format" value="\S\z" />
        <property name="message" value="Missing new line at the end of file" />
    </module-->

    <!--
    END: ModeShape doesn't current require these, though it would be nice to do so
    -->

    <!-- Allow custom files set supression -->
    <module name="SuppressionFilter">
        <!--The system property is set via Maven-->
        <property name="file" value="${checkstyle.suppressions.file}"/>
    </module>
    <module name="SuppressWarningsFilter" />
</module>
